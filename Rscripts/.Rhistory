rm(list=ls())
library(WGCNA)
library("biomaRt")
library(dplyr)
options(stringsAsFactors = FALSE);
ad3 = read.csv("../files/filtered counts/iPSC_differentiation_mRNA_only_AD3-results-with-normalized_filtered.csv")
ad2 = read.csv("../files/filtered counts/iPSC_differentiation_mRNA_only_AD2-results-with-normalized_filtered.csv")
eight = read.csv("../files/filtered counts/iPSC_differentiation_mRNA_only_840-results-with-normalized_filtered.csv")
allowWGCNAThreads()
nSets = 3;
setLabels = c("AD3","AD2","840")
shortLabels = c("AD3","AD2","840")
multiExpr = vector(mode = "list", length = 3)
multiExpr[[1]] = list(data = as.data.frame(t(ad3[-c(1:9)])));
names(multiExpr[[1]]$data) = ad3$Row.names;
rownames(multiExpr[[1]]$data) = names(ad3)[-c(1:9)];
multiExpr[[2]] = list(data = as.data.frame(t(ad2[-c(1:9)])));
names(multiExpr[[2]]$data) = ad2$ensembl_gene_id_version;
rownames(multiExpr[[2]]$data) = names(ad2)[-c(1:9)];
multiExpr[[3]] = list(data = as.data.frame(t(eight[-c(1:9)])));
names(multiExpr[[3]]$data) = eight$Row.names;
rownames(multiExpr[[3]]$data) = names(eight)[-c(1:9)];
View(ad2)
View(ad3)
exprSize = checkSets(multiExpr)
gsg = goodSamplesGenesMS(multiExpr, verbose = 2);
gsg$allOK
if (!gsg$allOK)
{
# Print information about the removed genes:
if (sum(!gsg$goodGenes) > 0)
printFlush(paste("Removing genes:", paste(names(multiExpr[[1]]$data)[!gsg$goodGenes],
collapse = ", ")))
for (set in 1:exprSize$nSets)
{
if (sum(!gsg$goodSamples[[set]]))
printFlush(paste("In set", setLabels[set], "removing samples",
paste(rownames(multiExpr[[set]]$data)[!gsg$goodSamples[[set]]], collapse = ", ")))
# Remove the offending genes and samples
multiExpr[[set]]$data = multiExpr[[set]]$data[gsg$goodSamples[[set]], gsg$goodGenes];
}
# Update exprSize
exprSize = checkSets(multiExpr)
}
library(WGCNA)
install.packages(GO.db)
BiocManager::install("GO.db")
library(WGCNA)
install.packages("impute")
install.packages(impute)
BiocManager::install("impute")
library(WGCNA)
BiocManager::install("preprocessCore")
library(WGCNA)
exprSize = checkSets(multiExpr)
gsg = goodSamplesGenesMS(multiExpr, verbose = 2);
gsg$allOK
if (!gsg$allOK)
{
# Print information about the removed genes:
if (sum(!gsg$goodGenes) > 0)
printFlush(paste("Removing genes:", paste(names(multiExpr[[1]]$data)[!gsg$goodGenes],
collapse = ", ")))
for (set in 1:exprSize$nSets)
{
if (sum(!gsg$goodSamples[[set]]))
printFlush(paste("In set", setLabels[set], "removing samples",
paste(rownames(multiExpr[[set]]$data)[!gsg$goodSamples[[set]]], collapse = ", ")))
# Remove the offending genes and samples
multiExpr[[set]]$data = multiExpr[[set]]$data[gsg$goodSamples[[set]], gsg$goodGenes];
}
# Update exprSize
exprSize = checkSets(multiExpr)
}
sampleTrees = list()
for (set in 1:3)
{
sampleTrees[[set]] = hclust(dist(multiExpr[[set]]$data), method = "average")
}
pdf(file = "SampleClustering_filtering.pdf", width = 12, height = 12);
par(mfrow=c(2,1))
par(mar = c(0, 4, 2, 0))
for (set in 1:3)
plot(sampleTrees[[set]], main = paste("Sample clustering on all genes in", setLabels[set]),
xlab="", sub="", cex = 0.7);
dev.off();
# Choose a set of soft-thresholding powers
powers = c(seq(4,10,by=1), seq(12,20, by=2));
# Initialize a list to hold the results of scale-free analysis
powerTables = vector(mode = "list", length = 3);
# Call the network topology analysis function for each set in turn
for (set in 1:3)
powerTables[[set]] = list(data = pickSoftThreshold(multiExpr[[set]]$data, powerVector=powers,
verbose = 2)[[2]],networkType = "signed");
collectGarbage();
# Plot the results:
colors = c("black", "red")
# Will plot these columns of the returned scale free analysis tables
plotCols = c(2,5,6,7)
colNames = c("Scale Free Topology Model Fit", "Mean connectivity", "Median connectivity",
"Max connectivity");
# Get the minima and maxima of the plotted points
ylim = matrix(NA, nrow = 2, ncol = 4);
for (set in 1:3)
{
for (col in 1:length(plotCols))
{
ylim[1, col] = min(ylim[1, col], powerTables[[set]]$data[, plotCols[col]], na.rm = TRUE);
ylim[2, col] = max(ylim[2, col], powerTables[[set]]$data[, plotCols[col]], na.rm = TRUE);
}
}
# Plot the quantities in the chosen columns vs. the soft thresholding power
sizeGrWindow(8, 6)
par(mfcol = c(2,2));
par(mar = c(4.2, 4.2 , 2.2, 0.5))
cex1 = 0.7;
for (col in 1:length(plotCols)) for (set in 1:3)
{
if (set==1)
{
plot(powerTables[[set]]$data[,1], -sign(powerTables[[set]]$data[,3])*powerTables[[set]]$data[,2],
xlab="Soft Threshold (power)",ylab=colNames[col],type="n", ylim = ylim[, col],
main = colNames[col]);
addGrid();
}
if (col==1)
{
text(powerTables[[set]]$data[,1], -sign(powerTables[[set]]$data[,3])*powerTables[[set]]$data[,2],
labels=powers,cex=cex1,col=colors[set]);
} else
text(powerTables[[set]]$data[,1], powerTables[[set]]$data[,plotCols[col]],
labels=powers,cex=cex1,col=colors[set]);
if (col==1)
{
legend("bottomright", legend = setLabels, col = colors, pch = 20) ;
} else
legend("topright", legend = setLabels, col = colors, pch = 20) ;
}
ad3 = read.csv("../files/filtered counts/AD3_miRNAs_timeline_ltr-results-with-normalized.csv")
ad2 = read.csv("../files/filtered counts/AD2_miRNAs_timeline_ltr-results-with-normalized.csv")
eight = read.csv("../files/filtered counts/840_miRNAs_timeline_ltr-results-with-normalized.csv")
ad3 = read.csv("../files/normalized_counts_DESEQ2/AD3_miRNAs_timeline_ltr-results-with-normalized.csv")
ad2 = read.csv("../files/normalized_counts_DESEQ2/AD2_miRNAs_timeline_ltr-results-with-normalized.csv")
eight = read.csv("../files/normalized_counts_DESEQ2/840_miRNAs_timeline_ltr-results-with-normalized.csv")
nSets = 3;
setLabels = c("AD3","AD2","840")
shortLabels = c("AD3","AD2","840")
multiExpr = vector(mode = "list", length = 3)
multiExpr[[1]] = list(data = as.data.frame(t(ad3[-c(1:8)])));
names(multiExpr[[1]]$data) = ad3$Row.names;
rownames(multiExpr[[1]]$data) = names(ad3)[-c(1:8)];
multiExpr[[2]] = list(data = as.data.frame(t(ad2[-c(1:8)])));
names(multiExpr[[2]]$data) = ad2$Row.names;
rownames(multiExpr[[2]]$data) = names(ad2)[-c(1:8)];
multiExpr[[3]] = list(data = as.data.frame(t(eight[-c(1:8)])));
names(multiExpr[[3]]$data) = eight$Row.namess;
rownames(multiExpr[[3]]$data) = names(eight)[-c(1:8)];
if (!gsg$allOK)
{
# Print information about the removed genes:
if (sum(!gsg$goodGenes) > 0)
printFlush(paste("Removing genes:", paste(names(multiExpr[[1]]$data)[!gsg$goodGenes],
collapse = ", ")))
for (set in 1:exprSize$nSets)
{
if (sum(!gsg$goodSamples[[set]]))
printFlush(paste("In set", setLabels[set], "removing samples",
paste(rownames(multiExpr[[set]]$data)[!gsg$goodSamples[[set]]], collapse = ", ")))
# Remove the offending genes and samples
multiExpr[[set]]$data = multiExpr[[set]]$data[gsg$goodSamples[[set]], gsg$goodGenes];
}
# Update exprSize
exprSize = checkSets(multiExpr)
}
sampleTrees = list()
for (set in 1:3)
{
sampleTrees[[set]] = hclust(dist(multiExpr[[set]]$data), method = "average")
}
pdf(file = "mirna_SampleClustering_filtering.pdf", width = 12, height = 12);
par(mfrow=c(2,1))
par(mar = c(0, 4, 2, 0))
for (set in 1:3)
plot(sampleTrees[[set]], main = paste("Sample clustering on all genes in", setLabels[set]),
xlab="", sub="", cex = 0.7);
dev.off();
# Network construction--> first consensus
# Choose a set of soft-thresholding powers
powers = c(seq(4,10,by=1), seq(12,20, by=2));
# Initialize a list to hold the results of scale-free analysis
powerTables = vector(mode = "list", length = 3);
# Call the network topology analysis function for each set in turn
for (set in 1:3)
powerTables[[set]] = list(data = pickSoftThreshold(multiExpr[[set]]$data, powerVector=powers,
verbose = 2)[[2]],networkType = "signed");
collectGarbage();
# Plot the results:
colors = c("black", "red")
# Will plot these columns of the returned scale free analysis tables
plotCols = c(2,5,6,7)
colNames = c("Scale Free Topology Model Fit", "Mean connectivity", "Median connectivity",
"Max connectivity");
# Get the minima and maxima of the plotted points
ylim = matrix(NA, nrow = 2, ncol = 4);
for (set in 1:3)
{
for (col in 1:length(plotCols))
{
ylim[1, col] = min(ylim[1, col], powerTables[[set]]$data[, plotCols[col]], na.rm = TRUE);
ylim[2, col] = max(ylim[2, col], powerTables[[set]]$data[, plotCols[col]], na.rm = TRUE);
}
}
# Plot the quantities in the chosen columns vs. the soft thresholding power
sizeGrWindow(8, 6)
par(mfcol = c(2,2));
par(mar = c(4.2, 4.2 , 2.2, 0.5))
cex1 = 0.7;
for (col in 1:length(plotCols)) for (set in 1:3)
{
if (set==1)
{
plot(powerTables[[set]]$data[,1], -sign(powerTables[[set]]$data[,3])*powerTables[[set]]$data[,2],
xlab="Soft Threshold (power)",ylab=colNames[col],type="n", ylim = ylim[, col],
main = colNames[col]);
addGrid();
}
if (col==1)
{
text(powerTables[[set]]$data[,1], -sign(powerTables[[set]]$data[,3])*powerTables[[set]]$data[,2],
labels=powers,cex=cex1,col=colors[set]);
} else
text(powerTables[[set]]$data[,1], powerTables[[set]]$data[,plotCols[col]],
labels=powers,cex=cex1,col=colors[set]);
if (col==1)
{
legend("bottomright", legend = setLabels, col = colors, pch = 20) ;
} else
legend("topright", legend = setLabels, col = colors, pch = 20) ;
}
# Choose a set of soft-thresholding powers
powers = c(seq(1,10,by=1), seq(12,20, by=2));
# Initialize a list to hold the results of scale-free analysis
powerTables = vector(mode = "list", length = 3);
# Call the network topology analysis function for each set in turn
for (set in 1:3)
powerTables[[set]] = list(data = pickSoftThreshold(multiExpr[[set]]$data, powerVector=powers,
verbose = 2)[[2]],networkType = "signed");
collectGarbage();
# Plot the results:
colors = c("black", "red")
# Will plot these columns of the returned scale free analysis tables
plotCols = c(2,5,6,7)
colNames = c("Scale Free Topology Model Fit", "Mean connectivity", "Median connectivity",
"Max connectivity");
# Get the minima and maxima of the plotted points
ylim = matrix(NA, nrow = 2, ncol = 4);
for (set in 1:3)
{
for (col in 1:length(plotCols))
{
ylim[1, col] = min(ylim[1, col], powerTables[[set]]$data[, plotCols[col]], na.rm = TRUE);
ylim[2, col] = max(ylim[2, col], powerTables[[set]]$data[, plotCols[col]], na.rm = TRUE);
}
}
# Plot the quantities in the chosen columns vs. the soft thresholding power
sizeGrWindow(8, 6)
par(mfcol = c(2,2));
par(mar = c(4.2, 4.2 , 2.2, 0.5))
cex1 = 0.7;
for (col in 1:length(plotCols)) for (set in 1:3)
{
if (set==1)
{
plot(powerTables[[set]]$data[,1], -sign(powerTables[[set]]$data[,3])*powerTables[[set]]$data[,2],
xlab="Soft Threshold (power)",ylab=colNames[col],type="n", ylim = ylim[, col],
main = colNames[col]);
addGrid();
}
if (col==1)
{
text(powerTables[[set]]$data[,1], -sign(powerTables[[set]]$data[,3])*powerTables[[set]]$data[,2],
labels=powers,cex=cex1,col=colors[set]);
} else
text(powerTables[[set]]$data[,1], powerTables[[set]]$data[,plotCols[col]],
labels=powers,cex=cex1,col=colors[set]);
if (col==1)
{
legend("bottomright", legend = setLabels, col = colors, pch = 20) ;
} else
legend("topright", legend = setLabels, col = colors, pch = 20) ;
}
